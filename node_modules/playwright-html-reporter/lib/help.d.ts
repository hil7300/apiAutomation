import { TestStep } from '@playwright/test/reporter';
import { ExecOptions } from './types/execOptions.types';
declare class Help {
    private execOptions;
    private ansiRegex;
    private ansiColors;
    private errorCodeLinesToPrint;
    private stepCodeLinesToPrint;
    private freePort;
    constructor(execOptions: ExecOptions);
    convertMsToTime(duration: number): string;
    getRandomColor(): string;
    stripAnsi(str: string): string;
    escapeHTML(text: string): string;
    ansi2htmlMarkup(text: string): string;
    printStep(id: string, count: number, testStep: TestStep, space: number): string;
    processLineByLine(filename: string, lineNumber: number, lines: number): string;
    printErrors(errors: string, errorCode: string, modalId: string): string;
    printErrorCode(errorFile: string): string;
    printCode(filename: string, fileLine: number, lines: number): string;
    printScreenshotComparison(id: string, attachmentExpectedPath: string, attachmentActualPath: string, attachmentDiffPath: string): string;
    printScreenshot(id: string, attachmentPath: string): string;
    printScreenshots(screenshots: string, modalId: string): string;
    printVideo(id: string, attachmentPath: string): string;
    printVideos(videos: string, modalId: string): string;
    printStdout(id: string, stdout: string): string;
    printStderr(id: string, stderr: string): string;
    printTrace(id: string, attachmentPath: string): string;
    convertBase64(fileToConvert: string): string;
    getShortFilePath(filepath: string, testFolder: string): string;
    createFile(filepath: string, content: string): void;
    updateHtml(html: string, tag: string, content: string, contentType: string, filename: string): string;
    base64ToFile(base64data: string, filename: string): void;
    compressFileContent(content: string, type: string): string;
    getPortFree(): Promise<string>;
}
export default Help;
